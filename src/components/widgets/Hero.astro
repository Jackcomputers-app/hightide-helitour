---
import Image from "~/components/common/Image.astro";
import Button from "~/components/ui/Button.astro";
import type { CallToAction } from "~/types";
import { TypeAnimation } from "react-type-animation";

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  id,
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline,
  content = await Astro.slots.render("content"),
  actions = await Astro.slots.render("actions"),
  image = await Astro.slots.render("image"),
} = Astro.props;
---

<section
  class="relative h-screen-3/4 lg:h-screen not-prose overflow-hidden"
  {...id ? { id } : {}}
>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div
    class="flex justify-center align-middle items-center h-full w-full mx-auto px-4 sm:px-6 z-50"
  >
    <div>
      {
        image && (
          <>
            <div class="absolute bg-gradient-to-b from-gray-200/40 to-transparent dark:bg-slate-900/30 inset-0 -z-10 h-full w-full bg-zoom" />
            <div class="absolute inset-0 -z-50 m-auto h-full w-full bg-zoom">
              {typeof image === "string" ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="object-contain object-center h-full w-full"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  {...image}
                />
              )}
            </div>
          </>
        )
      }
    </div>
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <>
              <h2
                class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white filter drop-shadow-xl dark:text-gray-300"
                set:html={title}
              />
              <TypeAnimation
                preRenderFirstString
                sequence={[
                  "Beaufort",
                  1500,
                  "Southport",
                  1500,
                  "St Simons Island",
                  2000,
                ]}
                className="text-sky-400/95 italic font-black text-6xl lg:text-8xl dark:text-gray-200"
                wrapper="h1"
                speed={30}
                deletionSpeed={50}
                repeat={27}
                client:visible
              />
            </>
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <div
                class="text-xl text-muted mb-6 dark:text-slate-300"
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="mt-8 max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
